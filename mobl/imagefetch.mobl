module mobl::imagefetch

// Source based on http://emilsblog.lerch.org/2009/07/javascript-hacks-using-xhr-to-load.html

@doc "Downloads an image and returns it as a base64-encoded string to be used as url for the image control"
external function downloadImageAsBase64(url : String) : String

<javascript>
/*
 * getByteAt and encodeBinary inspired by base64 string encoder:
 *
 * Copyright (c) 2010 Nick Galbreath
 * http://code.google.com/p/stringencoders/source/browse/#svn/trunk/javascript
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

mobl.imagefetch.Base64 = {
  // private property
  _alphaStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  
  _padChar: '=',
  
  getByteAt: function(str, idx) {
  	var x = str.charCodeAt(idx) & 0xff; // throw away high-order byte, as documented at: https://developer.mozilla.org/En/Using_XMLHttpRequest#Handling_binary_data
    if (x > 255) {
        throw new Error();
    }
    return x;
  },
  
  encodeBinary: function(input){
  	if (arguments.length !== 1) {
        throw new SyntaxError("Not enough arguments");
    }
    
    var i, b10;
    var x = [];

    // convert to string
    input = '' + input;

    var imax = input.length - input.length % 3;

    if (input.length === 0) {
        return input;
    }
    for (i = 0; i < imax; i += 3) {
        b10 = (this.getByteAt(input,i) << 16) | (this.getByteAt(input,i+1) << 8) | this.getByteAt(input,i+2);
        x.push(this._alphaStr.charAt(b10 >> 18));
        x.push(this._alphaStr.charAt((b10 >> 12) & 0x3F));
        x.push(this._alphaStr.charAt((b10 >> 6) & 0x3f));
        x.push(this._alphaStr.charAt(b10 & 0x3f));
    }
    switch (input.length - imax) {
    case 1:
        b10 = this.getByteAt(input,i) << 16;
        x.push(this._alphaStr.charAt(b10 >> 18) + this._alphaStr.charAt((b10 >> 12) & 0x3F) +
               this._padChar + this._padChar);
        break;
    case 2:
        b10 = (this.getByteAt(input,i) << 16) | (this.getByteAt(input,i+1) << 8);
        x.push(this._alphaStr.charAt(b10 >> 18) + this._alphaStr.charAt((b10 >> 12) & 0x3F) +
               this._alphaStr.charAt((b10 >> 6) & 0x3f) + this._padChar);
        break;
    }
    return x.join('');
  }
};

mobl.imagefetch.downloadImageAsBase64 = function(url, callback) {
  /*if(url.indexOf('http://') !== -1) {
    url = mobl.proxyUrl(url);
  }*/
  $.ajax({
    url: url,
    dataType: "text",
    beforeSend: function(xhr) {
      xhr.overrideMimeType('text/plain; charset=x-user-defined');
    },
    success: function(data) {
      var data = mobl.imagefetch.Base64.encodeBinary(data);
      // my super image-type detection code
      var fileType = 'image/png';
      var firstPart = data.substring(0, 100);
      if(data.substring(0, 3) === 'GIF') {
        fileType = 'image/gif';
      } else if(firstPart.indexOf('JFIF') !== -1) {
        fileType = 'image/jpeg';
      }
      callback("data:" + fileType + ";base64," + data);
    },
    error: function() {
      callback(null);
    }
  });
};
</javascript>