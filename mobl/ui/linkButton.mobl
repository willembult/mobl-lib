/**
 * Copyright (c) 2011 Willem Bult <willem.bult@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
 
 
/**
 * Sometimes buttons should actually be links (<a href/>), 
 * for example to trigger calls (tel:) or texts (sms:)
 * However, when making them look like buttons, with touch 
 * effects, click event handlers do not get called anymore 
 * on touch devices. 
 *
 * This control triggers an additional click event when needed.
 * It also allows for cancellation of the click by returning false
 * in the onclick callback.
 */

module mobl::ui::linkButton
import mobl::ui::generic

control linkButton(link : String, onclick : Callback = null, style : Style = buttonStyle, pushedStyle : Style = buttonPushedStyle) {
	var pushed : Bool = false
	
	lnk@<a 
		href="javascript:void(0);" 
		class=pushed ? pushedStyle : style
		
		ontouchdown={
			event.preventDefault();
			pushed = true;
		}
		
		ontouchdrag={
			if(event.y < 0 || event.y > lnk.outerHeight() || event.x < 0 || event.x > lnk.outerWidth()) {
		    	pushed = false;
		    }
		}
		
		ontouchup={
			if (pushed) {
				pushed = false;
				event.preventDefault();
				
				if (isTouchDevice()) {
					lnk.click();
				}
			}
		}
		
		onmouseout={
			if (pushed) {
				pushed = false;
			}
		}
	>
			
		elements()
				
	</a>
	
	script {
		lnk.bind("click", {
			if (lnk.attr("href") == "javascript:void(0);") {
				if (null != onclick ? onclick(event) : true) {
					triggerLink(event, link);
				}
			}
			
			pushed = false;
		});
	}
}


function triggerLink(event : DOMEvent, href : String) : void {
	$(event.currentTarget).attr("href", href);
	fireMouseEvent(event.currentTarget, "click");		
	$(event.currentTarget).attr("href","javascript:void(0);");
}

external sync function fireMouseEvent(el : Dynamic, ev : String) : void
<javascript>
__ns.fireMouseEvent = function(el, ev) {
	if ( document.createEvent ) {
		var evObj = document.createEvent('MouseEvents');
		evObj.initEvent( ev, true, false );
		el.dispatchEvent(evObj);
	} else if( document.createEventObject ) {
		el.fireEvent('on'+ev);
    }                        
};
</javascript>