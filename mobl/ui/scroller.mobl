/**
 * Copyright (c) 2011 Willem Bult <willem.bult@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
 
/**
 * Scroller shows it's content in a scrollable element that takes
 * up all available space in its first relatively or absolutely 
 * positioned parent. 
 */
 
module mobl::ui::scroller
import mobl::ui::gluePanel

load js/jquery-watch.js 
load js/iscroll.js 

control scroller(snapToItems : Bool = false, onRefresh : Callback = null) {
	// Use a glue panel to take up all available space
	gluePanel() {     
		scrl@<div style="position: absolute; top: 0px; bottom: 0px; left: 0px; right: 0px; overflow-x: hidden; overflow-y: auto;">elements()</div>
		
		script {     
			async {
				setupScroller(scrl, snapToItems, onRefresh); 
			}
		}
	}
}

external sync function setupScroller(elem : JQuery, snapToItems : Bool = null, onpulldown : Callback = null) : void
external sync function scrollTo(x : Num, y : Num, delay : Num, relative : Bool) : void
external sync function updateScroller() : void
external sync function destroyScroller() : void
<javascript>
var scroller;

__ns.setupScroller = function(elem, snap, onpulldown) {
	// when content gets added, update	
	elem.bind('DOMNodeInserted', function(e) {
		/*$(e.target).watch("top,left,height,width,display,opacity", function (data, i) {
			__ns.updateScroller();				
		});*/
		
		__ns.updateScroller();		
	});
	
	// when content gets removed, update
	elem.bind('DOMNodeRemoved', function(e) {
		//$(e.target).unwatch();
		
		// last child elem is iScroll-internal div,
		// if that gets removed we're destroyed
		if (e.target.iscroll !== undefined) {
			delete e.target.iscroll;
			__ns.destroyScroller();
		} else {			
			__ns.updateScroller();
		}		
	});
	
	// update scroller on window resize	
	$(window).bind('resize', function() {
		__ns.updateScroller();
	});
		
	setTimeout(function() {
		scroller = new iScroll(elem[0], {
			hScroll: false,
			
			snap: snap ? "li" : null,
			pullToRefresh: onpulldown ? "down" : false,
			onPullDown: function(event) {
				onpulldown();
			}
		});
		
		elem.children().last()[0].iscroll = scroller;
	}, 0);		
}; 

__ns.updateCount = 0;
__ns.updateScroller = function() {
	var curUpdateCount = __ns.updateCount++;
				
	setTimeout(function() {
		if (__ns.updateCount === 1) {
			if (scroller) {
				setTimeout(function() {
					scroller.refresh();
				}, 0);
			}
		}
		
		__ns.updateCount--;
	}, 100);
};

__ns.scrollTo = function(x, y, delay, relative) {
	scroller.scrollTo(x, y, delay, relative);
};

__ns.destroyScroller = function() {
	if (scroller) {
		scroller.destroy();
		scroller = null;
	}
};
</javascript>

