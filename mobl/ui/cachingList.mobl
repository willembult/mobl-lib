module mobl::ui::cachingList

control cachingList(items : Array<?>, ctrl : Control1<?>) {
	root@<span></span>
	
	var cache = Map<String, JQuery>()
	
	// tricking mobl into monitoring changes to items
	when (items.length || items.length == 0) {
		script {
			root.children().detach();
			
			foreach (i in range(0, items.length)) {
				var item = items.get(i);
				var element : JQuery = cache.get(JSON.stringify(item));
				
				if (!isDefined(element)) {
					element = renderControl1(ctrl, item);
					cache.set(JSON.stringify(item), element);
				}
				
				element.appendTo(root);
			}
		}
	}
}

external sync function isDefined(v : Dynamic) : Bool
<javascript>
__ns.isDefined = function(v) {
	return v !== undefined;
};
</javascript>


external function renderControl1(ctrl : Control1<Object>, item : Object) : JQuery

<javascript>
/*
 * renderControl(ctrl, [arg, ...])
 *
 * takes a dynamic number of arguments:
 *  - first argument is the control function
 *  - further arguments are passed to the control function as arguments
 *
 * returns result from the control function (jQuery object)
 */

__ns.renderControl = function(ctrl) {
	
	var newArguments = new Array();
	for (var i = 1; i < arguments.length - 1; i++) {
		newArguments.push(mobl.ref(arguments[i]));
	}
	
	// elements (null)
	newArguments.push(null);
	// callback
	newArguments.push(arguments[arguments.length - 1]);
	
	ctrl.apply(null, newArguments);
};

__ns.renderControl1 = __ns.renderControl;
__ns.renderControl2 = __ns.renderControl;
</javascript>



